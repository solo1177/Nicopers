const rotateViewer={
    container:null,
    imgList:null,
    buttonRotate:null,
    buttonRotateReverse:null,
    buttonAutoRotate:null,
    dragging:!1,
    direction:-1,
    startX:0,
    currentImgNum:1,
    tmpImgNum:0,
    rateX:.6,
    degree:45,
    rotateTimerId:void 0,
    speed:.45,
    deg:0,
    interval:1e3/60,
    init:async function({
        containerId:containerId,
        autoRotate:autoRotate=!1,
        buttonAutoRotateId:buttonAutoRotateId=!1
    }){
        if(this.container=document.getElementById(containerId),!this.container)throw new Error("Containerが見つかりません");
        if(this.imgList=[...this.container.querySelectorAll("div>img")],!this.imgList.length)throw new Error("Imgが見つかりません");
        if(this.imgList.forEach(img=>img.src=img.getAttribute("data-src")),await this.watchLoading(),this.complete(),buttonAutoRotateId){
            if(this.buttonAutoRotate=document.getElementById(buttonAutoRotateId),!this.buttonAutoRotate)throw new Error("指定されたIDの要素が存在しません");
            this.setupButtonAutoRotate()
        }
        autoRotate&&this.autoRotate()},watchLoading:function(){
            let loaded=0;return new Promise((resolve,reject)=>{
                this.imgList.forEach(img=>{img.addEventListener("load",evt=>{if(loaded++,loaded==this.imgList.length)return resolve()})})})},
                complete:function(){this.container&&(this.container.classList.remove("loading"),this.container.classList.add("complete"),
                this.container.addEventListener("mousedown",evt=>{this.stop(),this.dragging=!0,this.tmpImgNum=this.currentImgNum,this.startX=evt.clientX},!1),
                this.container.addEventListener("touchstart",evt=>{this.stop(),this.dragging=!0,this.tmpImgNum=this.currentImgNum,this.startX=evt.touches[0].clientX},!1),
                document.addEventListener("mouseup",evt=>{this.dragging=!1},!1),
                document.addEventListener("touchend",evt=>{this.dragging=!1},!1),
                this.container.addEventListener("mousemove",evt=>{this.dragging&&this.calcTarget(evt.clientX-this.startX)},!1),
                this.container.addEventListener("touchmove",evt=>{this.dragging&&this.calcTarget(evt.touches[0].clientX-this.startX)},!1))},
                calcTarget:function(diff){const deg=Math.round(-diff*this.rateX*this.direction+36e4+this.tmpImgNum*this.degree),num=Math.floor(deg%360/this.degree)+1;
                num!==this.currentImgNum&&(this.currentImgNum=num,this.container.querySelector("div.active").classList.remove("active"),
                this.container.querySelector(`div.d${this.currentImgNum}`).classList.add("active"))},reverse:function(){this.direction*=-1},
                stop:function(){this.rotateTimerId&&(this.rotateTimerId=clearInterval(this.rotateTimerId)),this.container.classList.remove("autorotating"),
                this.buttonAutoRotate&&(this.buttonAutoRotate.textContent="自動回転")},rotate:function(){this.deg+=this.speed*this.direction,this.deg<0&&(this.deg+=36e5);
                    const num=Math.floor(this.deg%360/this.degree)+1;num!==this.currentImgNum&&(this.currentImgNum=num,this.container.querySelector("div.active").classList.remove("active"),
                    this.container.querySelector(`div.d${this.currentImgNum}`).classList.add("active"))},autoRotate:function(){this.stop(),this.deg=this.currentImgNum*this.degree,this.rotateTimerId=setInterval(()=>this.rotate(),this.interval),
                        this.rotate(),this.container.classList.add("autorotating"),this.buttonAutoRotate&&(this.buttonAutoRotate.textContent="回転停止")},
                        rotating:function(){return void 0!==this.rotateTimerId},toggle:function(){
    this.rotating()?this.stop():this.autoRotate()},setupButtonAutoRotate:function(){this.buttonAutoRotate&&this.buttonAutoRotate.addEventListener("click",evt=>{this.toggle()},!1)}};